{"code":"import * as tslib_1 from \"tslib\";\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport throttle from 'lodash.throttle';\r\nimport getScrollElement from './getScrollElement';\r\nfunction isInViewport(el) {\r\n    if (!el) {\r\n        return false;\r\n    }\r\n    var rect = el.getBoundingClientRect();\r\n    return (rect.top >= 0 &&\r\n        rect.left >= 0 &&\r\n        rect.top <=\r\n            (window.innerHeight || document.documentElement.clientHeight) &&\r\n        rect.left <= (window.innerWidth || document.documentElement.clientWidth));\r\n}\r\nvar fadeIn = \"\\n  @keyframes gracefulimage {\\n    0%   { opacity: 0.25; }\\n    50%  { opacity: 0.5; }\\n    100% { opacity: 1; }\\n  }\\n\";\r\nvar IS_SVG_SUPPORTED = document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#Image', '1.1');\r\nvar GracefulImage = /** @class */ (function (_super) {\r\n    tslib_1.__extends(GracefulImage, _super);\r\n    function GracefulImage(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.registerListener = function (event, fn) {\r\n            // eslint-disable-next-line react/no-find-dom-node\r\n            _this.scrollElement = getScrollElement(ReactDOM.findDOMNode(_this));\r\n            if (_this.scrollElement.addEventListener) {\r\n                _this.scrollElement.addEventListener(event, fn);\r\n            }\r\n            else {\r\n                //@ts-ignore\r\n                _this.scrollElement.attachEvent('on' + event, fn);\r\n            }\r\n        };\r\n        _this.clearEventListeners = function () {\r\n            _this.throttledFunction.cancel();\r\n            if (!_this.scrollElement) {\r\n                return;\r\n            }\r\n            _this.scrollElement.removeEventListener('load', _this.throttledFunction);\r\n            _this.scrollElement.removeEventListener('scroll', _this.throttledFunction);\r\n            _this.scrollElement.removeEventListener('resize', _this.throttledFunction);\r\n            _this.scrollElement.removeEventListener('gestureend', _this.throttledFunction);\r\n        };\r\n        /*\r\n            If placeholder is currently within the viewport then load the actual image\r\n            and remove all event listeners associated with it\r\n        */\r\n        _this.lazyLoad = function () {\r\n            if (isInViewport(_this.placeholderImage)) {\r\n                _this.clearEventListeners();\r\n                _this.loadImage();\r\n            }\r\n        };\r\n        _this._isMounted = false;\r\n        var placeholder = null;\r\n        if (IS_SVG_SUPPORTED) {\r\n            var width = _this.props.style && _this.props.style.width\r\n                ? _this.props.style.width\r\n                : _this.props.width\r\n                    ? _this.props.width\r\n                    : '200';\r\n            var height = _this.props.style && _this.props.style.height\r\n                ? _this.props.style.height\r\n                : _this.props.height\r\n                    ? _this.props.height\r\n                    : '150';\r\n            placeholder =\r\n                \"data:image/svg+xml;charset=utf-8,%3Csvg xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg' width%3D'{{w}}' height%3D'{{h}}' viewBox%3D'0 0 {{w}} {{h}}'%2F%3E\";\r\n            placeholder = placeholder\r\n                .replace(/{{w}}/g, width)\r\n                .replace(/{{h}}/g, height);\r\n        }\r\n        // store a reference to the throttled function\r\n        _this.throttledFunction = throttle(_this.lazyLoad, 150);\r\n        _this.state = {\r\n            loaded: false,\r\n            retryDelay: _this.props.retry.delay,\r\n            retryCount: 1,\r\n            placeholder: placeholder\r\n        };\r\n        return _this;\r\n    }\r\n    /*\r\n        - If image hasn't yet loaded AND user didn't want a placeholder OR SVG not supported then don't render anything\r\n        - Else if image has loaded then render the image\r\n        - Else render the placeholder\r\n    */\r\n    GracefulImage.prototype.render = function () {\r\n        var _this = this;\r\n        if (!this.state.loaded &&\r\n            (this.props.noPlaceholder || !IS_SVG_SUPPORTED))\r\n            return null;\r\n        var src = this.state.loaded ? this.props.src : this.state.placeholder;\r\n        var style = this.state.loaded\r\n            ? {\r\n                animationName: 'gracefulimage',\r\n                animationDuration: '0.3s',\r\n                animationIterationCount: 1,\r\n                animationTimingFunction: 'ease-in'\r\n            }\r\n            : { background: this.props.placeholderColor };\r\n        return (React.createElement(\"img\", { src: src, srcSet: this.props.srcSet, className: this.props.className, width: this.props.width, height: this.props.height, style: tslib_1.__assign({}, style, this.props.style), alt: this.props.alt, ref: function (ref) { return (_this.placeholderImage = ref); } }));\r\n    };\r\n    /*\r\n        Attempts to load an image src passed via props\r\n        and utilises image events to track sccess / failure of the loading\r\n    */\r\n    GracefulImage.prototype.componentDidMount = function () {\r\n        this._isMounted = true;\r\n        this.addAnimationStyles();\r\n        // if user wants to lazy load\r\n        if (!this.props.noLazyLoad && IS_SVG_SUPPORTED) {\r\n            // check if already within viewport to avoid attaching listeners\r\n            if (isInViewport(this.placeholderImage)) {\r\n                this.loadImage();\r\n            }\r\n            else {\r\n                this.registerListener('load', this.throttledFunction);\r\n                this.registerListener('scroll', this.throttledFunction);\r\n                this.registerListener('resize', this.throttledFunction);\r\n                this.registerListener('gestureend', this.throttledFunction); // to detect pinch on mobile devices\r\n            }\r\n        }\r\n        else {\r\n            this.loadImage();\r\n        }\r\n    };\r\n    /*\r\n    Clear timeout incase retry is still running\r\n    And clear any existing event listeners\r\n    */\r\n    GracefulImage.prototype.componentWillUnmount = function () {\r\n        this._isMounted = false;\r\n        if (this.timeout) {\r\n            window.clearTimeout(this.timeout);\r\n        }\r\n        this.clearEventListeners();\r\n    };\r\n    /*\r\n        Creating a stylesheet to hold the fading animation\r\n    */\r\n    GracefulImage.prototype.addAnimationStyles = function () {\r\n        var exists = document.head.querySelectorAll('[data-gracefulimage]');\r\n        if (!exists.length) {\r\n            var styleElement = document.createElement('style');\r\n            styleElement.setAttribute('data-gracefulimage', 'exists');\r\n            document.head.appendChild(styleElement);\r\n            styleElement.sheet.insertRule(fadeIn, styleElement.sheet.cssRules.length);\r\n        }\r\n    };\r\n    /*\r\n        Marks an image as loaded\r\n    */\r\n    GracefulImage.prototype.setLoaded = function () {\r\n        if (this._isMounted) {\r\n            this.setState({ loaded: true });\r\n        }\r\n    };\r\n    /*\r\n        Attempts to download an image, and tracks its success / failure\r\n    */\r\n    GracefulImage.prototype.loadImage = function () {\r\n        var _this = this;\r\n        var image = new Image();\r\n        image.onload = function () {\r\n            _this.setLoaded();\r\n        };\r\n        image.onerror = function () {\r\n            _this.handleImageRetries(image);\r\n        };\r\n        image.src = this.props.src;\r\n    };\r\n    /*\r\n        Handles the actual re-attempts of loading the image\r\n        following the default / provided retry algorithm\r\n    */\r\n    GracefulImage.prototype.handleImageRetries = function (image) {\r\n        var _this = this;\r\n        // if we are not mounted anymore, we do not care, and we can bail\r\n        if (!this._isMounted) {\r\n            return;\r\n        }\r\n        this.setState({ loaded: false }, function () {\r\n            if (_this.state.retryCount <= _this.props.retry.count) {\r\n                _this.timeout = setTimeout(function () {\r\n                    // if we are not mounted anymore, we do not care, and we can bail\r\n                    if (!_this._isMounted) {\r\n                        return;\r\n                    }\r\n                    // re-attempt fetching the image\r\n                    image.src = _this.props.src;\r\n                    // update count and delay\r\n                    _this.setState(function (prevState) {\r\n                        var updateDelay;\r\n                        if (_this.props.retry.accumulate === 'multiply') {\r\n                            updateDelay =\r\n                                prevState.retryDelay * _this.props.retry.delay;\r\n                        }\r\n                        else if (_this.props.retry.accumulate === 'add') {\r\n                            updateDelay =\r\n                                prevState.retryDelay + _this.props.retry.delay;\r\n                        }\r\n                        else if (_this.props.retry.accumulate === 'noop') {\r\n                            updateDelay = _this.props.retry.delay;\r\n                        }\r\n                        else {\r\n                            updateDelay = 'multiply';\r\n                        }\r\n                        return {\r\n                            retryDelay: updateDelay,\r\n                            retryCount: prevState.retryCount + 1\r\n                        };\r\n                    });\r\n                }, _this.state.retryDelay * 1000);\r\n            }\r\n        });\r\n    };\r\n    GracefulImage.defaultProps = {\r\n        placeholderColor: '#eee',\r\n        retry: {\r\n            count: 8,\r\n            delay: 2,\r\n            accumulate: 'multiply'\r\n        },\r\n        noRetry: false,\r\n        noPlaceholder: false,\r\n        noLazyLoad: false\r\n    };\r\n    return GracefulImage;\r\n}(Component));\r\nexport default GracefulImage;\r\n","references":["/Users/apple/@Projects/react-graceful-image-plus/node_modules/@types/react/index.d.ts","/Users/apple/@Projects/react-graceful-image-plus/node_modules/@types/react-dom/index.d.ts","/Users/apple/@Projects/react-graceful-image-plus/node_modules/@types/lodash.throttle/index.d.ts","/Users/apple/@Projects/react-graceful-image-plus/src/getScrollElement.tsx"],"dts":{"name":"/Users/apple/@Projects/react-graceful-image-plus/GracefulImage.d.ts","writeByteOrderMark":false,"text":"import { Component } from 'react';\r\ndeclare type Props = {\r\n    src?: string;\r\n    srcSet?: string;\r\n    width?: string;\r\n    height?: string;\r\n    className?: string;\r\n    alt?: string;\r\n    style?: any;\r\n    placeholderColor?: string;\r\n    noPlaceholder?: boolean;\r\n    retry?: any;\r\n    noRetry?: boolean;\r\n    noLazyLoad?: boolean;\r\n};\r\ndeclare type State = {\r\n    loaded: boolean;\r\n    retryCount: number;\r\n    retryDelay: number;\r\n    placeholder: string;\r\n};\r\ndeclare class GracefulImage extends Component<Props, State> {\r\n    placeholderImage: any;\r\n    throttledFunction: any;\r\n    timeout: any;\r\n    _isMounted: any;\r\n    scrollElement: any;\r\n    static defaultProps: {\r\n        placeholderColor: string;\r\n        retry: {\r\n            count: number;\r\n            delay: number;\r\n            accumulate: string;\r\n        };\r\n        noRetry: boolean;\r\n        noPlaceholder: boolean;\r\n        noLazyLoad: boolean;\r\n    };\r\n    constructor(props: any);\r\n    render(): JSX.Element;\r\n    componentDidMount(): void;\r\n    componentWillUnmount(): void;\r\n    registerListener: (event: any, fn: any) => void;\r\n    clearEventListeners: () => void;\r\n    addAnimationStyles(): void;\r\n    setLoaded(): void;\r\n    loadImage(): void;\r\n    lazyLoad: () => void;\r\n    handleImageRetries(image: any): void;\r\n}\r\nexport default GracefulImage;\r\n"}}
